uploadsBucketName
assetsBucketName assets.fisayofasuyi.tech
folderInput /avatar/original/
folderOutput avatar/processed/
webhookUrl http://api.fisayofasuyi.tech/webhooks/avatar
topicName cruddur-assets
functionPath ../aws/lambdas/processed-images
Resources:
  UploadsBucket5E5E9B64:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cruddur-uploaded-avatars-1993
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/UploadsBucket/Resource
  UploadsBucketNotifications4592A072:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: UploadsBucket5E5E9B64
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:Post
            LambdaFunctionArn:
              Fn::GetAtt:
                - ThumbLambda5C775138
                - Arn
      Managed: true
    DependsOn:
      - UploadsBucketAllowBucketNotificationsToThumbImageServicesCdkStackThumbLambda3F4F4EA2F04D395D
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/UploadsBucket/Notifications/Resource
  UploadsBucketAllowBucketNotificationsToThumbImageServicesCdkStackThumbLambda3F4F4EA2F04D395D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ThumbLambda5C775138
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - UploadsBucket5E5E9B64
          - Arn
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/UploadsBucket/AllowBucketNotificationsToThumbImageServicesCdkStackThumbLambda3F4F4EA2
  AssetsBucketNotificationsA137991F:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName: assets.fisayofasuyi.tech
      NotificationConfiguration:
        TopicConfigurations:
          - Events:
              - s3:ObjectCreated:Put
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: avatar/processed/
            TopicArn:
              Ref: ThumbingTopic6D1C97CE
      Managed: false
    DependsOn:
      - ThumbingTopichttpapifisayofasuyitechwebhooksavatarA847F2ED
      - ThumbingTopicPolicy9FC24222
      - ThumbingTopic6D1C97CE
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/AssetsBucket/Notifications/Resource
  ThumbLambdaServiceRole4BE4E3E0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbLambda/ServiceRole/Resource
  ThumbLambdaServiceRoleDefaultPolicyB74653D4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::assets.fisayofasuyi.tech/*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UploadsBucket5E5E9B64
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ThumbLambdaServiceRoleDefaultPolicyB74653D4
      Roles:
        - Ref: ThumbLambdaServiceRole4BE4E3E0
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbLambda/ServiceRole/DefaultPolicy/Resource
  ThumbLambda5C775138:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: a59bd5a87c87fc574041e1659d022ef6e1ae5c1bb59ae2caf18cd0ce42700dda.zip
      Role:
        Fn::GetAtt:
          - ThumbLambdaServiceRole4BE4E3E0
          - Arn
      Environment:
        Variables:
          DEST_BUCKET_NAME: assets.fisayofasuyi.tech
          FOLDER_INPUT: /avatar/original/
          FOLDER_OUTPUT: avatar/processed/
          PROCESS_WIDTH: "512"
          PROCESS_HEIGHT: "512"
      Handler: index.handler
      Runtime: nodejs18.x
    DependsOn:
      - ThumbLambdaServiceRoleDefaultPolicyB74653D4
      - ThumbLambdaServiceRole4BE4E3E0
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbLambda/Resource
      aws:asset:path: asset.a59bd5a87c87fc574041e1659d022ef6e1ae5c1bb59ae2caf18cd0ce42700dda
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ThumbingTopic6D1C97CE:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: cruddur-assets
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbingTopic/Resource
  ThumbingTopichttpapifisayofasuyitechwebhooksavatarA847F2ED:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: http
      TopicArn:
        Ref: ThumbingTopic6D1C97CE
      Endpoint: http://api.fisayofasuyi.tech/webhooks/avatar
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbingTopic/http:----api.fisayofasuyi.tech--webhooks--avatar/Resource
  ThumbingTopicPolicy9FC24222:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - :s3:::assets.fisayofasuyi.tech
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Ref: ThumbingTopic6D1C97CE
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: ThumbingTopic6D1C97CE
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/ThumbingTopic/Policy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1WPSwvCMBCEf4v3dH2B4lEFz6LeJU1XWdsm0k0UCfnvJo1PCMw3m2EnmcB8AeOBvHOhqrpoqAS/t1LVIo6OnqfgV07VaMX6pF+UZSUZg2hkW1YSfLzdYtcSMxktNk4rmyCO3xwEyRb8zjSYxr1uTUPqkWymIHh6lMxoGZZJBGsGfzBXUimVYe9KVh1d3w1/vo989/7YEPpeZOM6heIDfVH885n0OSXWRleUX6xNhXDh4W08g3hGgwsTFZ3TllqEXdYnnBrJdkMBAAA=
    Metadata:
      aws:cdk:path: ThumbImageServicesCdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

